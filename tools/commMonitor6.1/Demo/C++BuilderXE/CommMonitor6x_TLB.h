// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 39763 $
// File generated on 2011/12/21 17:11:08 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\Downloaded Program Files\CONFLICT.4\CommMonitor6x.ocx (1)
// LIBID: {E33195D5-E29C-4295-8552-DDFA24001F02}
// LCID: 0
// Helpfile: 
// HelpString: CommMonitor6x Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   CommMonitor6x_TLBH
#define   CommMonitor6x_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Commmonitor6x_tlb
{

// *********************************************************************//
// HelpString: CommMonitor6x Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_CommMonitor6x;
extern __declspec (package) const GUID IID_ICommMonitor6x;
extern __declspec (package) const GUID DIID_ICommMonitor6Events;
extern __declspec (package) const GUID CLSID_CommMonitor;
extern __declspec (package) const GUID GUID_TxAlignment;
extern __declspec (package) const GUID GUID_TxBevelCut;
extern __declspec (package) const GUID GUID_TxBorderStyle;
extern __declspec (package) const GUID GUID_TxDragMode;
extern __declspec (package) const GUID GUID_TxMouseButton;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    TxAlignment;
enum class    TxBevelCut;
enum class    TxBorderStyle;
enum class    TxDragMode;
enum class    TxMouseButton;
interface DECLSPEC_UUID("{4C2D6F22-ACFF-47D3-B3E8-E271E538F044}") ICommMonitor6x;
typedef TComInterface<ICommMonitor6x, &IID_ICommMonitor6x> ICommMonitor6xPtr;

interface DECLSPEC_UUID("{2E50E334-3D45-4743-A090-59CF4C04D8F3}") ICommMonitor6Events;
typedef TComInterface<ICommMonitor6Events, &DIID_ICommMonitor6Events> ICommMonitor6EventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef ICommMonitor6x CommMonitor;
typedef ICommMonitor6xPtr CommMonitorPtr;

#define LIBID_OF_CommMonitor (&LIBID_CommMonitor6x)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class TxAlignment
{
  taLeftJustify = 0, 
  taRightJustify = 1, 
  taCenter = 2
};

enum class TxBevelCut
{
  bvNone = 0, 
  bvLowered = 1, 
  bvRaised = 2, 
  bvSpace = 3
};

enum class TxBorderStyle
{
  bsNone = 0, 
  bsSingle = 1
};

enum class TxDragMode
{
  dmManual = 0, 
  dmAutomatic = 1
};

enum class TxMouseButton
{
  mbLeft = 0, 
  mbRight = 1, 
  mbMiddle = 2
};

// *********************************************************************//
// Interface: ICommMonitor6x
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C2D6F22-ACFF-47D3-B3E8-E271E538F044}
// *********************************************************************//
interface ICommMonitor6x  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Commmonitor6x_tlb::TxAlignment* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Commmonitor6x_tlb::TxAlignment Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(VARIANT_BOOL Value/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_BevelInner(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_BevelInner(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_BevelOuter(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_BevelOuter(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Commmonitor6x_tlb::TxBorderStyle* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Commmonitor6x_tlb::TxBorderStyle Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* Value/*[out,retval]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR Value/*[in]*/) = 0; // [-518]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_Ctl3D(VARIANT_BOOL Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_UseDockManager(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_UseDockManager(VARIANT_BOOL Value/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_DockSite(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_DockSite(VARIANT_BOOL Value/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_DragCursor(short* Value/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE set_DragCursor(short Value/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_DragMode(Commmonitor6x_tlb::TxDragMode* Value/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_DragMode(Commmonitor6x_tlb::TxDragMode Value/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_FullRepaint(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE set_FullRepaint(VARIANT_BOOL Value/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL Value/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_ParentBackground(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_ParentBackground(VARIANT_BOOL Value/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_ParentColor(VARIANT_BOOL Value/*[in]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE InitiateAction(void) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  virtual HRESULT STDMETHODCALLTYPE StartMonitor(BSTR sPortName/*[in]*/, 
                                                 VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE StopMonitor(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE PauseMonitor(VARIANT_BOOL bPause/*[in]*/, 
                                                 VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE SerialCtrlCode(unsigned_long ctlCode/*[in]*/, 
                                                   unsigned_long* Value/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE GetPIDImagerName(unsigned_long dwPID/*[in]*/, 
                                                     BSTR* Value/*[out,retval]*/) = 0; // [230]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Commmonitor6x_tlb::TxAlignment __fastcall get_Alignment(void)
  {
    Commmonitor6x_tlb::TxAlignment Value;
    OLECHECK(this->get_Alignment((Commmonitor6x_tlb::TxAlignment*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AutoSize(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
    return Value;
  }

  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelInner(void)
  {
    Commmonitor6x_tlb::TxBevelCut Value;
    OLECHECK(this->get_BevelInner((Commmonitor6x_tlb::TxBevelCut*)&Value));
    return Value;
  }

  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelOuter(void)
  {
    Commmonitor6x_tlb::TxBevelCut Value;
    OLECHECK(this->get_BevelOuter((Commmonitor6x_tlb::TxBevelCut*)&Value));
    return Value;
  }

  Commmonitor6x_tlb::TxBorderStyle __fastcall get_BorderStyle(void)
  {
    Commmonitor6x_tlb::TxBorderStyle Value;
    OLECHECK(this->get_BorderStyle((Commmonitor6x_tlb::TxBorderStyle*)&Value));
    return Value;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_Caption((BSTR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Ctl3D(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Ctl3D((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_UseDockManager(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_UseDockManager((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DockSite(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DockSite((VARIANT_BOOL*)&Value));
    return Value;
  }

  short __fastcall get_DragCursor(void)
  {
    short Value;
    OLECHECK(this->get_DragCursor((short*)&Value));
    return Value;
  }

  Commmonitor6x_tlb::TxDragMode __fastcall get_DragMode(void)
  {
    Commmonitor6x_tlb::TxDragMode Value;
    OLECHECK(this->get_DragMode((Commmonitor6x_tlb::TxDragMode*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_FullRepaint(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_FullRepaint((VARIANT_BOOL*)&Value));
    return Value;
  }

  IFontDispPtr __fastcall get_Font(void)
  {
    IFontDispPtr Value;
    OLECHECK(this->get_Font(&Value));
    return Value;
  }

  HRESULT __fastcall  set_Font(IFontDispPtr Value/*[in]*/)
  {
    return set_Font((IFontDisp*)Value/*[in]*/);
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ParentBackground(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ParentBackground((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ParentColor(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ParentColor((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ParentCtl3D(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ParentCtl3D((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DoubleBuffered(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  long __fastcall DrawTextBiDiModeFlagsReadingOnly(void)
  {
    long Value;
    OLECHECK(this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall IsRightToLeft(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->IsRightToLeft((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall UseRightToLeftReading(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->UseRightToLeftReading((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall UseRightToLeftScrollBar(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall StartMonitor(BSTR sPortName/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->StartMonitor(sPortName, (VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall StopMonitor(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->StopMonitor((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall PauseMonitor(VARIANT_BOOL bPause/*[in]*/)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->PauseMonitor(bPause, (VARIANT_BOOL*)&Value));
    return Value;
  }

  unsigned_long __fastcall SerialCtrlCode(unsigned_long ctlCode/*[in]*/)
  {
    unsigned_long Value;
    OLECHECK(this->SerialCtrlCode(ctlCode, (unsigned_long*)&Value));
    return Value;
  }

  BSTR __fastcall GetPIDImagerName(unsigned_long dwPID/*[in]*/)
  {
    BSTR Value = 0;
    OLECHECK(this->GetPIDImagerName(dwPID, (BSTR*)&Value));
    return Value;
  }


  __property   Commmonitor6x_tlb::TxAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Commmonitor6x_tlb::TxBevelCut BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   Commmonitor6x_tlb::TxBevelCut BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   Commmonitor6x_tlb::TxBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   VARIANT_BOOL    UseDockManager = {read = get_UseDockManager, write = set_UseDockManager};
  __property   VARIANT_BOOL    DockSite = {read = get_DockSite, write = set_DockSite};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Commmonitor6x_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    FullRepaint = {read = get_FullRepaint, write = set_FullRepaint};
  __property   IFontDispPtr    Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICommMonitor6Events
// Flags:     (4096) Dispatchable
// GUID:      {2E50E334-3D45-4743-A090-59CF4C04D8F3}
// *********************************************************************//
interface ICommMonitor6Events : public TDispWrapper<IDispatch>
{
  void __fastcall OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                              VARIANT_BOOL* Resize/*[in,out]*/)
  {
    _TDispID _dispid(/* OnCanResize */ DISPID(201));
    TAutoArgs<3> _args;
    _args[1] = NewWidth /*[VT_I4:1]*/;
    _args[2] = NewHeight /*[VT_I4:1]*/;
    _args[3] = Resize /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(202));
    OleProcedure(_dispid);
  }

  void __fastcall OnConstrainedResize(long* MinWidth/*[in,out]*/, long* MinHeight/*[in,out]*/, 
                                      long* MaxWidth/*[in,out]*/, long* MaxHeight/*[in,out]*/)
  {
    _TDispID _dispid(/* OnConstrainedResize */ DISPID(203));
    TAutoArgs<4> _args;
    _args[1] = MinWidth /*[VT_I4:1]*/;
    _args[2] = MinHeight /*[VT_I4:1]*/;
    _args[3] = MaxWidth /*[VT_I4:1]*/;
    _args[4] = MaxHeight /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick()
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(204));
    OleProcedure(_dispid);
  }

  void __fastcall OnResize()
  {
    _TDispID _dispid(/* OnResize */ DISPID(205));
    OleProcedure(_dispid);
  }

  HRESULT __fastcall OnMonitor(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, long dwPID/*[in]*/, 
                               VARIANT* vtData/*[in]*/, long dwSize/*[in]*/)
  {
    _TDispID _dispid(/* OnMonitor */ DISPID(206));
    TAutoArgs<5> _args;
    _args[1] = sPortName /*[VT_BSTR:0]*/;
    _args[2] = dwCtrlCode /*[VT_I4:0]*/;
    _args[3] = dwPID /*[VT_I4:0]*/;
    _args[4] = vtData /*[VT_VARIANT:1]*/;
    _args[5] = dwSize /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall OnAscii(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, long dwPID/*[in]*/, 
                             BSTR sData/*[in]*/, long dwSize/*[in]*/)
  {
    _TDispID _dispid(/* OnAscii */ DISPID(207));
    TAutoArgs<5> _args;
    _args[1] = sPortName /*[VT_BSTR:0]*/;
    _args[2] = dwCtrlCode /*[VT_I4:0]*/;
    _args[3] = dwPID /*[VT_I4:0]*/;
    _args[4] = sData /*[VT_BSTR:0]*/;
    _args[5] = dwSize /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMICommMonitor6x
// Interface: ICommMonitor6x
// *********************************************************************//
template <class T /* ICommMonitor6x */ >
class TCOMICommMonitor6xT : public TComInterface<ICommMonitor6x>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICommMonitor6xT() {}
  TCOMICommMonitor6xT(ICommMonitor6x *intf, bool addRef = false) : TComInterface<ICommMonitor6x>(intf, addRef) {}
  TCOMICommMonitor6xT(const TCOMICommMonitor6xT& src) : TComInterface<ICommMonitor6x>(src) {}
  TCOMICommMonitor6xT& operator=(const TCOMICommMonitor6xT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Alignment(Commmonitor6x_tlb::TxAlignment* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxAlignment __fastcall get_Alignment(void);
  HRESULT         __fastcall set_Alignment(Commmonitor6x_tlb::TxAlignment Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_BevelInner(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Commmonitor6x_tlb::TxBorderStyle* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Commmonitor6x_tlb::TxBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Ctl3D(void);
  HRESULT         __fastcall set_Ctl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_UseDockManager(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseDockManager(void);
  HRESULT         __fastcall set_UseDockManager(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DockSite(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DockSite(void);
  HRESULT         __fastcall set_DockSite(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DragCursor(short* Value/*[out,retval]*/);
  short           __fastcall get_DragCursor(void);
  HRESULT         __fastcall set_DragCursor(short Value/*[in]*/);
  HRESULT         __fastcall get_DragMode(Commmonitor6x_tlb::TxDragMode* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxDragMode __fastcall get_DragMode(void);
  HRESULT         __fastcall set_DragMode(Commmonitor6x_tlb::TxDragMode Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_FullRepaint(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullRepaint(void);
  HRESULT         __fastcall set_FullRepaint(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDispPtr    __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDispPtr Value/*[in]*/);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentCtl3D(void);
  HRESULT         __fastcall set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/);
  long            __fastcall DrawTextBiDiModeFlagsReadingOnly(void);
  HRESULT         __fastcall InitiateAction(void);
  HRESULT         __fastcall IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsRightToLeft(void);
  HRESULT         __fastcall UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftReading(void);
  HRESULT         __fastcall UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftScrollBar(void);
  HRESULT         __fastcall SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall StartMonitor(BSTR sPortName/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall StartMonitor(BSTR sPortName/*[in]*/);
  HRESULT         __fastcall StopMonitor(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall StopMonitor(void);
  HRESULT         __fastcall PauseMonitor(VARIANT_BOOL bPause/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PauseMonitor(VARIANT_BOOL bPause/*[in]*/);
  HRESULT         __fastcall SerialCtrlCode(unsigned_long ctlCode/*[in]*/, 
                                            unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall SerialCtrlCode(unsigned_long ctlCode/*[in]*/);
  HRESULT         __fastcall GetPIDImagerName(unsigned_long dwPID/*[in]*/, 
                                              BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetPIDImagerName(unsigned_long dwPID/*[in]*/);

  __property   Commmonitor6x_tlb::TxAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Commmonitor6x_tlb::TxBevelCut BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   Commmonitor6x_tlb::TxBevelCut BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   Commmonitor6x_tlb::TxBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   VARIANT_BOOL    UseDockManager = {read = get_UseDockManager, write = set_UseDockManager};
  __property   VARIANT_BOOL    DockSite = {read = get_DockSite, write = set_DockSite};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Commmonitor6x_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    FullRepaint = {read = get_FullRepaint, write = set_FullRepaint};
  __property   IFontDispPtr    Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
};
typedef TCOMICommMonitor6xT<ICommMonitor6x> TCOMICommMonitor6x;

// *********************************************************************//
// DispIntf:  ICommMonitor6x
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C2D6F22-ACFF-47D3-B3E8-E271E538F044}
// *********************************************************************//
template<class T>
class ICommMonitor6xDispT : public TAutoDriver<ICommMonitor6x>
{
public:
  ICommMonitor6xDispT(){}

  ICommMonitor6xDispT(ICommMonitor6x *pintf)
  {
    TAutoDriver<ICommMonitor6x>::Bind(pintf, false);
  }

  ICommMonitor6xDispT(ICommMonitor6xPtr pintf)
  {
    TAutoDriver<ICommMonitor6x>::Bind(pintf, true);
  }

  ICommMonitor6xDispT& operator=(ICommMonitor6x *pintf)
  {
    TAutoDriver<ICommMonitor6x>::Bind(pintf, false);
    return *this;
  }

  ICommMonitor6xDispT& operator=(ICommMonitor6xPtr pintf)
  {
    TAutoDriver<ICommMonitor6x>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CommMonitor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CommMonitor);
  }

  HRESULT         __fastcall get_Alignment(Commmonitor6x_tlb::TxAlignment* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxAlignment __fastcall get_Alignment(void);
  HRESULT         __fastcall set_Alignment(Commmonitor6x_tlb::TxAlignment Value/*[in]*/);
  HRESULT         __fastcall get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_BevelInner(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelInner(void);
  HRESULT         __fastcall set_BevelInner(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/);
  HRESULT         __fastcall get_BevelOuter(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBevelCut __fastcall get_BevelOuter(void);
  HRESULT         __fastcall set_BevelOuter(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Commmonitor6x_tlb::TxBorderStyle* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxBorderStyle __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Commmonitor6x_tlb::TxBorderStyle Value/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Ctl3D(void);
  HRESULT         __fastcall set_Ctl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_UseDockManager(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseDockManager(void);
  HRESULT         __fastcall set_UseDockManager(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DockSite(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DockSite(void);
  HRESULT         __fastcall set_DockSite(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DragCursor(short* Value/*[out,retval]*/);
  short           __fastcall get_DragCursor(void);
  HRESULT         __fastcall set_DragCursor(short Value/*[in]*/);
  HRESULT         __fastcall get_DragMode(Commmonitor6x_tlb::TxDragMode* Value/*[out,retval]*/);
  Commmonitor6x_tlb::TxDragMode __fastcall get_DragMode(void);
  HRESULT         __fastcall set_DragMode(Commmonitor6x_tlb::TxDragMode Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_FullRepaint(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullRepaint(void);
  HRESULT         __fastcall set_FullRepaint(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDispPtr    __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDispPtr Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentBackground(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentBackground(void);
  HRESULT         __fastcall set_ParentBackground(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentCtl3D(void);
  HRESULT         __fastcall set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/);
  long            __fastcall DrawTextBiDiModeFlagsReadingOnly(void);
  HRESULT         __fastcall InitiateAction();
  HRESULT         __fastcall IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsRightToLeft(void);
  HRESULT         __fastcall UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftReading(void);
  HRESULT         __fastcall UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftScrollBar(void);
  HRESULT         __fastcall SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/);
  HRESULT         __fastcall AboutBox();
  HRESULT         __fastcall StartMonitor(BSTR sPortName/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall StartMonitor(BSTR sPortName/*[in]*/);
  HRESULT         __fastcall StopMonitor(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall StopMonitor(void);
  HRESULT         __fastcall PauseMonitor(VARIANT_BOOL bPause/*[in]*/, 
                                          VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall PauseMonitor(VARIANT_BOOL bPause/*[in]*/);
  HRESULT         __fastcall SerialCtrlCode(unsigned_long ctlCode/*[in]*/, 
                                            unsigned_long* Value/*[out,retval]*/);
  unsigned_long   __fastcall SerialCtrlCode(unsigned_long ctlCode/*[in]*/);
  HRESULT         __fastcall GetPIDImagerName(unsigned_long dwPID/*[in]*/, 
                                              BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall GetPIDImagerName(unsigned_long dwPID/*[in]*/);

  __property   Commmonitor6x_tlb::TxAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   VARIANT_BOOL    AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Commmonitor6x_tlb::TxBevelCut BevelInner = {read = get_BevelInner, write = set_BevelInner};
  __property   Commmonitor6x_tlb::TxBevelCut BevelOuter = {read = get_BevelOuter, write = set_BevelOuter};
  __property   Commmonitor6x_tlb::TxBorderStyle BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   VARIANT_BOOL    Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   VARIANT_BOOL    UseDockManager = {read = get_UseDockManager, write = set_UseDockManager};
  __property   VARIANT_BOOL    DockSite = {read = get_DockSite, write = set_DockSite};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Commmonitor6x_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   VARIANT_BOOL    FullRepaint = {read = get_FullRepaint, write = set_FullRepaint};
  __property   IFontDispPtr    Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   VARIANT_BOOL    ParentBackground = {read = get_ParentBackground, write = set_ParentBackground};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
};
typedef ICommMonitor6xDispT<ICommMonitor6x> ICommMonitor6xDisp;

// *********************************************************************//
// DispIntf:  ICommMonitor6Events
// Flags:     (4096) Dispatchable
// GUID:      {2E50E334-3D45-4743-A090-59CF4C04D8F3}
// *********************************************************************//
template <class T>
class ICommMonitor6EventsDispT : public TAutoDriver<ICommMonitor6Events>
{
public:
  ICommMonitor6EventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                                         VARIANT_BOOL* Resize/*[in,out]*/);
  void            __fastcall OnClick();
  void            __fastcall OnConstrainedResize(long* MinWidth/*[in,out]*/, 
                                                 long* MinHeight/*[in,out]*/, 
                                                 long* MaxWidth/*[in,out]*/, 
                                                 long* MaxHeight/*[in,out]*/);
  void            __fastcall OnDblClick();
  void            __fastcall OnResize();
  HRESULT         __fastcall OnMonitor(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, 
                                       long dwPID/*[in]*/, VARIANT* vtData/*[in]*/, 
                                       long dwSize/*[in]*/);
  HRESULT         __fastcall OnAscii(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, 
                                     long dwPID/*[in]*/, BSTR sData/*[in]*/, long dwSize/*[in]*/);

};
typedef ICommMonitor6EventsDispT<ICommMonitor6Events> ICommMonitor6EventsDisp;

// *********************************************************************//
// SmartIntf: TCOMICommMonitor6x
// Interface: ICommMonitor6x
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Alignment(Commmonitor6x_tlb::TxAlignment* Value/*[out,retval]*/)
{
  return (*this)->get_Alignment(Value);
}

template <class T> Commmonitor6x_tlb::TxAlignment __fastcall
TCOMICommMonitor6xT<T>::get_Alignment(void)
{
  Commmonitor6x_tlb::TxAlignment Value;
  OLECHECK(this->get_Alignment((Commmonitor6x_tlb::TxAlignment*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Alignment(Commmonitor6x_tlb::TxAlignment Value/*[in]*/)
{
  return (*this)->set_Alignment(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AutoSize(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AutoSize((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AutoSize(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_BevelInner(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/)
{
  return (*this)->get_BevelInner(Value);
}

template <class T> Commmonitor6x_tlb::TxBevelCut __fastcall
TCOMICommMonitor6xT<T>::get_BevelInner(void)
{
  Commmonitor6x_tlb::TxBevelCut Value;
  OLECHECK(this->get_BevelInner((Commmonitor6x_tlb::TxBevelCut*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_BevelInner(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/)
{
  return (*this)->set_BevelInner(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_BevelOuter(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/)
{
  return (*this)->get_BevelOuter(Value);
}

template <class T> Commmonitor6x_tlb::TxBevelCut __fastcall
TCOMICommMonitor6xT<T>::get_BevelOuter(void)
{
  Commmonitor6x_tlb::TxBevelCut Value;
  OLECHECK(this->get_BevelOuter((Commmonitor6x_tlb::TxBevelCut*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_BevelOuter(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/)
{
  return (*this)->set_BevelOuter(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_BorderStyle(Commmonitor6x_tlb::TxBorderStyle* Value/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(Value);
}

template <class T> Commmonitor6x_tlb::TxBorderStyle __fastcall
TCOMICommMonitor6xT<T>::get_BorderStyle(void)
{
  Commmonitor6x_tlb::TxBorderStyle Value;
  OLECHECK(this->get_BorderStyle((Commmonitor6x_tlb::TxBorderStyle*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_BorderStyle(Commmonitor6x_tlb::TxBorderStyle Value/*[in]*/)
{
  return (*this)->set_BorderStyle(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_Caption(Value);
}

template <class T> BSTR __fastcall
TCOMICommMonitor6xT<T>::get_Caption(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_Caption((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Caption(BSTR Value/*[in]*/)
{
  return (*this)->set_Caption(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMICommMonitor6xT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Ctl3D(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_Ctl3D(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Ctl3D((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Ctl3D(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Ctl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_UseDockManager(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_UseDockManager(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_UseDockManager(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_UseDockManager((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_UseDockManager(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_UseDockManager(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_DockSite(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DockSite(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_DockSite(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DockSite((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_DockSite(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DockSite(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_DragCursor(short* Value/*[out,retval]*/)
{
  return (*this)->get_DragCursor(Value);
}

template <class T> short __fastcall
TCOMICommMonitor6xT<T>::get_DragCursor(void)
{
  short Value;
  OLECHECK(this->get_DragCursor((short*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_DragCursor(short Value/*[in]*/)
{
  return (*this)->set_DragCursor(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_DragMode(Commmonitor6x_tlb::TxDragMode* Value/*[out,retval]*/)
{
  return (*this)->get_DragMode(Value);
}

template <class T> Commmonitor6x_tlb::TxDragMode __fastcall
TCOMICommMonitor6xT<T>::get_DragMode(void)
{
  Commmonitor6x_tlb::TxDragMode Value;
  OLECHECK(this->get_DragMode((Commmonitor6x_tlb::TxDragMode*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_DragMode(Commmonitor6x_tlb::TxDragMode Value/*[in]*/)
{
  return (*this)->set_DragMode(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_FullRepaint(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_FullRepaint(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_FullRepaint(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_FullRepaint((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_FullRepaint(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_FullRepaint(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDispPtr __fastcall
TCOMICommMonitor6xT<T>::get_Font(void)
{
  IFontDispPtr Value;
  OLECHECK(this->get_Font((IFontDispPtr*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Font(IFontDispPtr Value/*[in]*/)
{
  return (*this)->set_Font((IFontDisp*)Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Locked(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Locked(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_Locked(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Locked(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Locked(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_ParentBackground(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentBackground(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_ParentBackground(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ParentBackground((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_ParentBackground(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ParentBackground(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentColor(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_ParentColor(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ParentColor((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_ParentColor(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ParentColor(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentCtl3D(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_ParentCtl3D(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ParentCtl3D((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ParentCtl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMICommMonitor6xT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/)
{
  return (*this)->DrawTextBiDiModeFlagsReadingOnly(Value);
}

template <class T> long __fastcall
TCOMICommMonitor6xT<T>::DrawTextBiDiModeFlagsReadingOnly(void)
{
  long Value;
  OLECHECK(this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::InitiateAction(void)
{
  return (*this)->InitiateAction();
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->IsRightToLeft(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::IsRightToLeft(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->IsRightToLeft((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->UseRightToLeftReading(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::UseRightToLeftReading(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->UseRightToLeftReading((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->UseRightToLeftScrollBar(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::UseRightToLeftScrollBar(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/)
{
  return (*this)->SetSubComponent(IsSubComponent);
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::StartMonitor(BSTR sPortName/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->StartMonitor(sPortName, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::StartMonitor(BSTR sPortName/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->StartMonitor(sPortName/*[in]*/, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::StopMonitor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->StopMonitor(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::StopMonitor(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->StopMonitor((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::PauseMonitor(VARIANT_BOOL bPause/*[in]*/, 
                                     VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->PauseMonitor(bPause, Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMICommMonitor6xT<T>::PauseMonitor(VARIANT_BOOL bPause/*[in]*/)
{
  VARIANT_BOOL Value;
  OLECHECK(this->PauseMonitor(bPause/*[in]*/, (VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::SerialCtrlCode(unsigned_long ctlCode/*[in]*/, 
                                       unsigned_long* Value/*[out,retval]*/)
{
  return (*this)->SerialCtrlCode(ctlCode, Value);
}

template <class T> unsigned_long __fastcall
TCOMICommMonitor6xT<T>::SerialCtrlCode(unsigned_long ctlCode/*[in]*/)
{
  unsigned_long Value;
  OLECHECK(this->SerialCtrlCode(ctlCode/*[in]*/, (unsigned_long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICommMonitor6xT<T>::GetPIDImagerName(unsigned_long dwPID/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  return (*this)->GetPIDImagerName(dwPID, Value);
}

template <class T> BSTR __fastcall
TCOMICommMonitor6xT<T>::GetPIDImagerName(unsigned_long dwPID/*[in]*/)
{
  BSTR Value = 0;
  OLECHECK(this->GetPIDImagerName(dwPID/*[in]*/, (BSTR*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  ICommMonitor6x
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4C2D6F22-ACFF-47D3-B3E8-E271E538F044}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Alignment(Commmonitor6x_tlb::TxAlignment* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Commmonitor6x_tlb::TxAlignment __fastcall
ICommMonitor6xDispT<T>::get_Alignment(void)
{
  Commmonitor6x_tlb::TxAlignment Value;
  this->get_Alignment((Commmonitor6x_tlb::TxAlignment*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Alignment(Commmonitor6x_tlb::TxAlignment Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_AutoSize(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_AutoSize(void)
{
  VARIANT_BOOL Value;
  this->get_AutoSize((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_AutoSize(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_BevelInner(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BevelInner"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Commmonitor6x_tlb::TxBevelCut __fastcall
ICommMonitor6xDispT<T>::get_BevelInner(void)
{
  Commmonitor6x_tlb::TxBevelCut Value;
  this->get_BevelInner((Commmonitor6x_tlb::TxBevelCut*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_BevelInner(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BevelInner"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_BevelOuter(Commmonitor6x_tlb::TxBevelCut* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BevelOuter"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Commmonitor6x_tlb::TxBevelCut __fastcall
ICommMonitor6xDispT<T>::get_BevelOuter(void)
{
  Commmonitor6x_tlb::TxBevelCut Value;
  this->get_BevelOuter((Commmonitor6x_tlb::TxBevelCut*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_BevelOuter(Commmonitor6x_tlb::TxBevelCut Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BevelOuter"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_BorderStyle(Commmonitor6x_tlb::TxBorderStyle* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Commmonitor6x_tlb::TxBorderStyle __fastcall
ICommMonitor6xDispT<T>::get_BorderStyle(void)
{
  Commmonitor6x_tlb::TxBorderStyle Value;
  this->get_BorderStyle((Commmonitor6x_tlb::TxBorderStyle*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_BorderStyle(Commmonitor6x_tlb::TxBorderStyle Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Caption(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommMonitor6xDispT<T>::get_Caption(void)
{
  BSTR Value;
  this->get_Caption((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Caption(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(-518));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
ICommMonitor6xDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ctl3D"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_Ctl3D(void)
{
  VARIANT_BOOL Value;
  this->get_Ctl3D((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Ctl3D(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ctl3D"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_UseDockManager(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseDockManager"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_UseDockManager(void)
{
  VARIANT_BOOL Value;
  this->get_UseDockManager((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_UseDockManager(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseDockManager"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_DockSite(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DockSite"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_DockSite(void)
{
  VARIANT_BOOL Value;
  this->get_DockSite((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_DockSite(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DockSite"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_DragCursor(short* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCursor"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ICommMonitor6xDispT<T>::get_DragCursor(void)
{
  short Value;
  this->get_DragCursor((short*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_DragCursor(short Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCursor"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_DragMode(Commmonitor6x_tlb::TxDragMode* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragMode"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Commmonitor6x_tlb::TxDragMode __fastcall
ICommMonitor6xDispT<T>::get_DragMode(void)
{
  Commmonitor6x_tlb::TxDragMode Value;
  this->get_DragMode((Commmonitor6x_tlb::TxDragMode*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_DragMode(Commmonitor6x_tlb::TxDragMode Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragMode"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_FullRepaint(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRepaint"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_FullRepaint(void)
{
  VARIANT_BOOL Value;
  this->get_FullRepaint((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_FullRepaint(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRepaint"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDispPtr __fastcall
ICommMonitor6xDispT<T>::get_Font(void)
{
  IFontDispPtr Value;
  this->get_Font(&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Font(IFontDispPtr Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Locked(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_Locked(void)
{
  VARIANT_BOOL Value;
  this->get_Locked((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Locked(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_ParentBackground(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentBackground"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_ParentBackground(void)
{
  VARIANT_BOOL Value;
  this->get_ParentBackground((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_ParentBackground(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentBackground"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentColor"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_ParentColor(void)
{
  VARIANT_BOOL Value;
  this->get_ParentColor((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_ParentColor(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentColor"), DISPID(214));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentCtl3D"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_ParentCtl3D(void)
{
  VARIANT_BOOL Value;
  this->get_ParentCtl3D((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentCtl3D"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICommMonitor6xDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawTextBiDiModeFlagsReadingOnly"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICommMonitor6xDispT<T>::DrawTextBiDiModeFlagsReadingOnly(void)
{
  long Value;
  this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::InitiateAction()
{
  _TDispID _dispid(*this, OLETEXT("InitiateAction"), DISPID(221));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRightToLeft"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::IsRightToLeft(void)
{
  VARIANT_BOOL Value;
  this->IsRightToLeft((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRightToLeftReading"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::UseRightToLeftReading(void)
{
  VARIANT_BOOL Value;
  this->UseRightToLeftReading((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRightToLeftScrollBar"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::UseRightToLeftScrollBar(void)
{
  VARIANT_BOOL Value;
  this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSubComponent"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = IsSubComponent /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::StartMonitor(BSTR sPortName/*[in]*/, VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartMonitor"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = sPortName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::StartMonitor(BSTR sPortName/*[in]*/)
{
  VARIANT_BOOL Value;
  this->StartMonitor(sPortName, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::StopMonitor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopMonitor"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::StopMonitor(void)
{
  VARIANT_BOOL Value;
  this->StopMonitor((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::PauseMonitor(VARIANT_BOOL bPause/*[in]*/, 
                                     VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PauseMonitor"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = bPause /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ICommMonitor6xDispT<T>::PauseMonitor(VARIANT_BOOL bPause/*[in]*/)
{
  VARIANT_BOOL Value;
  this->PauseMonitor(bPause, (VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::SerialCtrlCode(unsigned_long ctlCode/*[in]*/, 
                                       unsigned_long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SerialCtrlCode"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = ctlCode /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> unsigned_long __fastcall
ICommMonitor6xDispT<T>::SerialCtrlCode(unsigned_long ctlCode/*[in]*/)
{
  unsigned_long Value;
  this->SerialCtrlCode(ctlCode, (unsigned_long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICommMonitor6xDispT<T>::GetPIDImagerName(unsigned_long dwPID/*[in]*/, BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPIDImagerName"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = dwPID /*[VT_UI4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICommMonitor6xDispT<T>::GetPIDImagerName(unsigned_long dwPID/*[in]*/)
{
  BSTR Value;
  this->GetPIDImagerName(dwPID, (BSTR*)&Value);
  return Value;
}

// *********************************************************************//
// DispIntf:  ICommMonitor6Events
// Flags:     (4096) Dispatchable
// GUID:      {2E50E334-3D45-4743-A090-59CF4C04D8F3}
// *********************************************************************//
template <class T> void __fastcall
ICommMonitor6EventsDispT<T>::OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                                         VARIANT_BOOL* Resize/*[in,out]*/)
{
  _TDispID _dispid(/* OnCanResize */ DISPID(201));
  TAutoArgs<3> _args;
  _args[1] = NewWidth /*[VT_I4:1]*/;
  _args[2] = NewHeight /*[VT_I4:1]*/;
  _args[3] = Resize /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ICommMonitor6EventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(202));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ICommMonitor6EventsDispT<T>::OnConstrainedResize(long* MinWidth/*[in,out]*/, 
                                                 long* MinHeight/*[in,out]*/, 
                                                 long* MaxWidth/*[in,out]*/, 
                                                 long* MaxHeight/*[in,out]*/)
{
  _TDispID _dispid(/* OnConstrainedResize */ DISPID(203));
  TAutoArgs<4> _args;
  _args[1] = MinWidth /*[VT_I4:1]*/;
  _args[2] = MinHeight /*[VT_I4:1]*/;
  _args[3] = MaxWidth /*[VT_I4:1]*/;
  _args[4] = MaxHeight /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ICommMonitor6EventsDispT<T>::OnDblClick()
{
  _TDispID _dispid(/* OnDblClick */ DISPID(204));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ICommMonitor6EventsDispT<T>::OnResize()
{
  _TDispID _dispid(/* OnResize */ DISPID(205));
  OleProcedure(_dispid);
}

template <class T> HRESULT __fastcall
ICommMonitor6EventsDispT<T>::OnMonitor(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, 
                                       long dwPID/*[in]*/, VARIANT* vtData/*[in]*/, 
                                       long dwSize/*[in]*/)
{
  _TDispID _dispid(/* OnMonitor */ DISPID(206));
  TAutoArgs<5> _args;
  _args[1] = sPortName /*[VT_BSTR:0]*/;
  _args[2] = dwCtrlCode /*[VT_I4:0]*/;
  _args[3] = dwPID /*[VT_I4:0]*/;
  _args[4] = vtData /*[VT_VARIANT:1]*/;
  _args[5] = dwSize /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICommMonitor6EventsDispT<T>::OnAscii(BSTR sPortName/*[in]*/, long dwCtrlCode/*[in]*/, 
                                     long dwPID/*[in]*/, BSTR sData/*[in]*/, long dwSize/*[in]*/)
{
  _TDispID _dispid(/* OnAscii */ DISPID(207));
  TAutoArgs<5> _args;
  _args[1] = sPortName /*[VT_BSTR:0]*/;
  _args[2] = dwCtrlCode /*[VT_I4:0]*/;
  _args[3] = dwPID /*[VT_I4:0]*/;
  _args[4] = sData /*[VT_BSTR:0]*/;
  _args[5] = dwSize /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CommMonitor
// Event Interface : ICommMonitor6Events
// *********************************************************************//
template <class T>
class TEvents_CommMonitor : public IConnectionPointImpl<T,
                                                 &DIID_ICommMonitor6Events,
#if !defined(_TLB_DYNAMIC_CONNECTIONPOINT_ARRAY)
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
#else
                                                 CComDynamicArray>
#endif
{
public:
  void            Fire_OnCanResize(long* NewWidth, long* NewHeight, VARIANT_BOOL* Resize);
  void            Fire_OnClick(void);
  void            Fire_OnConstrainedResize(long* MinWidth, long* MinHeight, long* MaxWidth, 
                                           long* MaxHeight);
  void            Fire_OnDblClick(void);
  void            Fire_OnResize(void);
  HRESULT         Fire_OnMonitor(BSTR sPortName, long dwCtrlCode, long dwPID, VARIANT* vtData, 
                                 long dwSize);
  HRESULT         Fire_OnAscii(BSTR sPortName, long dwCtrlCode, long dwPID, BSTR sData, long dwSize);
protected:
  ICommMonitor6EventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_CommMonitor<T>::Fire_OnCanResize(long* NewWidth, long* NewHeight, VARIANT_BOOL* Resize)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCanResize(NewWidth, NewHeight, Resize);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommMonitor<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommMonitor<T>::Fire_OnConstrainedResize(long* MinWidth, long* MinHeight, long* MaxWidth, 
                                                 long* MaxHeight)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConstrainedResize(MinWidth, MinHeight, MaxWidth, MaxHeight);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommMonitor<T>::Fire_OnDblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_CommMonitor<T>::Fire_OnResize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_CommMonitor<T>::Fire_OnMonitor(BSTR sPortName, long dwCtrlCode, long dwPID, VARIANT* vtData, 
                                       long dwSize)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMonitor(sPortName, dwCtrlCode, dwPID, vtData, dwSize);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

template <class T> HRESULT
TEvents_CommMonitor<T>::Fire_OnAscii(BSTR sPortName, long dwCtrlCode, long dwPID, BSTR sData, 
                                     long dwSize)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAscii(sPortName, dwCtrlCode, dwPID, sData, dwSize);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
  return S_OK;
}

#endif    //   __TLB_NO_EVENT_WRAPPERS

#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_DAX)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CommMonitor
// Event Interface : ICommMonitor6Events
// *********************************************************************//
template <typename T>
class ICommMonitor_EventsDispatcher : public IUnknown
{
public:
  void Fire_OnCanResize(long* NewWidth, long* NewHeight, VARIANT_BOOL* Resize)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnCanResize(NewWidth, NewHeight, Resize);
  }

  void Fire_OnClick(void)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnClick();
  }

  void Fire_OnConstrainedResize(long* MinWidth, long* MinHeight, long* MaxWidth, long* MaxHeight)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnConstrainedResize(MinWidth, MinHeight, MaxWidth, MaxHeight);
  }

  void Fire_OnDblClick(void)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnDblClick();
  }

  void Fire_OnResize(void)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnResize();
  }

  HRESULT Fire_OnMonitor(BSTR sPortName, long dwCtrlCode, long dwPID, VARIANT* vtData, long dwSize)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnMonitor(sPortName, dwCtrlCode, dwPID, vtData, dwSize);
    return S_OK;
  }

  HRESULT Fire_OnAscii(BSTR sPortName, long dwCtrlCode, long dwPID, BSTR sData, long dwSize)
  {
    ICommMonitor6EventsDisp dispInvoker;
    T* pClass = static_cast<T*>(this);
    if ((pClass->GetEventSink()) && (dispInvoker.Bind(pClass->GetEventSink())==S_OK))
      dispInvoker.OnAscii(sPortName, dwCtrlCode, dwPID, sData, dwSize);
    return S_OK;
  }

};

#endif    //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Commmonitor6x_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Commmonitor6x_tlb;
#endif

#pragma option pop

#endif // CommMonitor6x_TLBH
